name: CI Pipeline

on:
  push:
    branches: [master, main, develop]
  pull_request:
    branches: [master, main]

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort

      - name: Lint with ruff
        run: ruff check scripts/ tests/ --exit-zero

      - name: Check formatting
        run: black --check scripts/ tests/ --line-length 88 --extend-exclude 'airflow/'

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'tests/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r tests/requirements.txt

      - name: Run tests
        run: |
          pytest tests/test_core_modules.py -v --tb=short --maxfail=3

      - name: Generate coverage report
        if: matrix.python-version == '3.10'
        run: |
          pytest tests/test_core_modules.py --cov=scripts --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.10'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  validate-airflow-dags:
    name: Validate Airflow DAGs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Airflow dependencies
        run: |
          pip install apache-airflow==2.8.0

      - name: Validate DAG syntax
        run: |
          python -m py_compile airflow/dags/kindle_unified_pipeline.py

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API image
        run: |
          docker build -f Dockerfile.api -t sentiment-api:test .

      - name: Build Airflow image
        run: |
          docker build -f Dockerfile.airflow -t sentiment-airflow:test .
