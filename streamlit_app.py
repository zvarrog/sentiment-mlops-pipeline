"""Streamlit –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –¥–µ–º–æ –¥–ª—è sentiment analysis.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
- Real-time –∏–Ω—Ñ–µ—Ä–µ–Ω—Å
- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥—Ä–∏—Ñ—Ç–∞
"""

import json
from pathlib import Path

import pandas as pd
import plotly.express as px
import requests
import streamlit as st

API_URL = "http://localhost:8000"
MODEL_PATH = Path("artefacts/best_model.joblib")
METRICS_PATH = Path("artefacts/model_artefacts")


st.set_page_config(
    page_title="Sentiment Analysis Demo",
    page_icon="üìä",
    layout="wide",
)


def load_model_metadata():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏."""
    meta_file = METRICS_PATH / "best_model_meta.json"
    if meta_file.exists():
        with open(meta_file, encoding="utf-8") as f:
            return json.load(f)
    return None


def load_drift_report():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç drift report."""
    drift_file = Path("artefacts/drift_artefacts/drift_report.csv")
    if drift_file.exists():
        return pd.read_csv(drift_file)
    return None


def predict_sentiment(text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è."""
    try:
        response = requests.post(
            f"{API_URL}/predict",
            json={
                "reviewText": text,
                "text_len": float(len(text)),
                "word_count": float(len(text.split())),
            },
            timeout=5,
        )
        response.raise_for_status()
        return response.json()
    except Exception as e:
        return {"error": str(e)}


st.title("üìä Sentiment Analysis MLOps Demo")
st.markdown("---")

tab1, tab2, tab3, tab4 = st.tabs(
    ["üí¨ Inference", "üìà Metrics", "üîç Drift Monitor", "‚ÑπÔ∏è Model Info"]
)

with tab1:
    st.header("Real-time Inference")

    input_text = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:",
        placeholder="This book was absolutely amazing! Highly recommend.",
        height=150,
    )

    col1, col2 = st.columns([1, 4])
    with col1:
        predict_btn = st.button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å", type="primary", use_container_width=True)

    if predict_btn and input_text:
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."):
            result = predict_sentiment(input_text)

        if "error" in result:
            st.error(f"–û—à–∏–±–∫–∞ API: {result['error']}")
        else:
            sentiment = result.get("predicted_sentiment", "unknown")
            confidence = result.get("confidence", 0.0)

            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Sentiment", sentiment.upper())
            with col2:
                st.metric("Confidence", f"{confidence:.2%}")
            with col3:
                sentiment_emoji = "üòä" if sentiment == "positive" else "üòî"
                st.metric("", sentiment_emoji)

            st.progress(confidence)

            if confidence < 0.6:
                st.warning(
                    "‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏. –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º."
                )

with tab2:
    st.header("Model Metrics")

    meta = load_model_metadata()
    if meta:
        col1, col2, col3, col4 = st.columns(4)
        metrics = meta.get("test_metrics", {})

        with col1:
            st.metric("Accuracy", f"{metrics.get('accuracy', 0):.3f}")
        with col2:
            st.metric("Precision", f"{metrics.get('precision', 0):.3f}")
        with col3:
            st.metric("Recall", f"{metrics.get('recall', 0):.3f}")
        with col4:
            st.metric("F1 Score", f"{metrics.get('f1', 0):.3f}")

        st.markdown("---")

        feature_imp_file = METRICS_PATH / "feature_importances.json"
        if feature_imp_file.exists():
            with open(feature_imp_file, encoding="utf-8") as f:
                feature_importances = json.load(f)

            if feature_importances:
                df_imp = pd.DataFrame(
                    list(feature_importances.items()), columns=["Feature", "Importance"]
                ).sort_values("Importance", ascending=False)

                fig = px.bar(
                    df_imp.head(15),
                    x="Importance",
                    y="Feature",
                    orientation="h",
                    title="Top 15 Feature Importances",
                )
                st.plotly_chart(fig, use_container_width=True)

        optuna_file = METRICS_PATH / "optuna_top_trials.csv"
        if optuna_file.exists():
            st.subheader("Optuna HPO Trials")
            df_optuna = pd.read_csv(optuna_file)
            st.dataframe(df_optuna.head(10), use_container_width=True)

    else:
        st.warning("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Airflow.")

with tab3:
    st.header("Data Drift Monitoring")

    drift_df = load_drift_report()
    if drift_df is not None and not drift_df.empty:
        drift_df = drift_df.sort_values("psi_score", ascending=False)

        st.subheader("PSI Scores –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º")
        fig = px.bar(
            drift_df,
            x="feature",
            y="psi_score",
            color="drift_detected",
            title="Population Stability Index (PSI)",
            color_discrete_map={True: "red", False: "green"},
        )
        fig.add_hline(
            y=0.1, line_dash="dash", line_color="orange", annotation_text="Threshold"
        )
        st.plotly_chart(fig, use_container_width=True)

        drifted = drift_df[drift_df["drift_detected"] == True]
        if not drifted.empty:
            st.error(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—Ä–∏—Ñ—Ç –≤ {len(drifted)} –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö!")
            st.dataframe(drifted, use_container_width=True)
        else:
            st.success("‚úÖ –î—Ä–∏—Ñ—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.")

        st.subheader("–ò—Å—Ç–æ—Ä–∏—è –¥—Ä–∏—Ñ—Ç–∞")
        st.dataframe(drift_df, use_container_width=True)
    else:
        st.info(
            "–î–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥—Ä–∏—Ñ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ó–∞–ø—É—Å—Ç–∏—Ç–µ DAG —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º run_drift_monitor=true."
        )

with tab4:
    st.header("Model Information")

    meta = load_model_metadata()
    if meta:
        col1, col2 = st.columns(2)

        with col1:
            st.subheader("General Info")
            st.json(
                {
                    "Model Type": meta.get("model_kind", "unknown"),
                    "MLflow Run ID": meta.get("run_id", "N/A"),
                    "Training Date": meta.get("created_at", "N/A"),
                }
            )

        with col2:
            st.subheader("Hyperparameters")
            best_params = meta.get("best_params", {})
            if best_params:
                st.json(best_params)

        schema_file = METRICS_PATH / "model_schema.json"
        if schema_file.exists():
            st.subheader("Model Schema")
            with open(schema_file, encoding="utf-8") as f:
                schema = json.load(f)
            st.json(schema)
    else:
        st.warning("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

    st.markdown("---")
    st.markdown("**API Health Check**")
    try:
        response = requests.get(f"{API_URL}/", timeout=3)
        if response.ok:
            st.success(f"‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω: {API_URL}")
        else:
            st.error(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP {response.status_code})")
    except Exception as e:
        st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: {e}")
