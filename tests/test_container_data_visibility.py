"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ Airflow.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –≤–∏–¥–∏—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö.
"""
import logging
import os
from pathlib import Path

logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')
log = logging.getLogger(__name__)

def check_directory_contents(path, description):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    log.info(f"=== –ü—Ä–æ–≤–µ—Ä–∫–∞ {description} ===")
    log.info(f"–ü—É—Ç—å: {path}")

    if not Path(path).exists():
        log.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢: {path}")
        return

    log.info(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {path}")

    try:
        items = list(Path(path).iterdir())
        if not items:
            log.warning(f"‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ü–£–°–¢–ê–Ø: {path}")
            return

        log.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
        for item in sorted(items):
            if item.is_file():
                size_mb = item.stat().st_size / (1024 * 1024)
                log.info(f"  üìÑ {item.name} ({size_mb:.2f} MB)")
            elif item.is_dir():
                try:
                    sub_items = len(list(item.iterdir()))
                    log.info(f"  üìÅ {item.name}/ ({sub_items} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
                except PermissionError:
                    log.info(f"  üìÅ {item.name}/ (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞)")
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")

def main():
    log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ú–û–ù–¢–ò–†–û–í–ê–ù–ò–Ø –î–ê–ù–ù–´–• –í –ö–û–ù–¢–ï–ô–ù–ï–†–ï AIRFLOW")
    log.info("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    check_directory_contents("/opt/airflow", "–∫–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è Airflow")
    check_directory_contents("/opt/airflow/data", "–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö")
    check_directory_contents("/opt/airflow/data/raw", "–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    check_directory_contents("/opt/airflow/data/processed", "–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    check_directory_contents("/opt/airflow/scripts", "–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤")
    check_directory_contents("/opt/airflow/dags", "–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è DAG")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã
    log.info("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ===")

    files_to_check = [
        "/opt/airflow/data/raw/kindle_reviews.csv",
        "/opt/airflow/scripts/config.py",
        "/opt/airflow/scripts/download.py",
        "/opt/airflow/scripts/spark_process.py",
        "/home/airflow/.kaggle/kaggle.json"
    ]

    for file_path in files_to_check:
        path = Path(file_path)
        if path.exists():
            if path.is_file():
                size_mb = path.stat().st_size / (1024 * 1024)
                log.info(f"‚úÖ {file_path} ({size_mb:.2f} MB)")
            else:
                log.info(f"‚úÖ {file_path} (–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)")
        else:
            log.error(f"‚ùå –ù–ï –ù–ê–ô–î–ï–ù: {file_path}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    log.info("=== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===")
    env_vars = ["JAVA_HOME", "PYTHONPATH", "AIRFLOW__CORE__DAGS_FOLDER"]
    for var in env_vars:
        value = os.environ.get(var, "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê")
        log.info(f"{var} = {value}")

    log.info("=" * 60)
    log.info("üèÅ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")

if __name__ == "__main__":
    main()
