"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Å–∫—Ä–∏–ø—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
"""

import logging
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç–∞–º –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, "/opt/airflow/scripts")

try:
    from scripts.settings import (
        CSV_NAME,
        FORCE_PROCESS,
        PROCESSED_DATA_DIR,
        RAW_DATA_DIR,
    )

    CSV_PATH = str(RAW_DATA_DIR / CSV_NAME)
    logging.info("–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    logging.info(f"   FORCE_PROCESS = {FORCE_PROCESS}")
    logging.info(f"   CSV_PATH = {CSV_PATH}")
    logging.info(f"   PROCESSED_DATA_DIR = {PROCESSED_DATA_DIR}")
except ImportError as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    sys.exit(1)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from scripts.logging_config import setup_test_logging

log = setup_test_logging()


def test_file_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    log.info("üß™ –¢–ï–°–¢ –õ–û–ì–ò–ö–ò –ü–†–û–ü–£–°–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò")
    log.info("=" * 50)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ (–∫–∞–∫ –≤ spark_process.py)
    TRAIN_PATH = os.path.join(PROCESSED_DATA_DIR, "train.parquet")
    VAL_PATH = os.path.join(PROCESSED_DATA_DIR, "val.parquet")
    TEST_PATH = os.path.join(PROCESSED_DATA_DIR, "test.parquet")

    log.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –ø—É—Ç–∏:")
    log.info(f"  TRAIN_PATH: {TRAIN_PATH}")
    log.info(f"  VAL_PATH: {VAL_PATH}")
    log.info(f"  TEST_PATH: {TEST_PATH}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    train_exists = Path(TRAIN_PATH).exists()
    val_exists = Path(VAL_PATH).exists()
    test_exists = Path(TEST_PATH).exists()

    log.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    log.info(f"  train.parquet: {'‚úÖ' if train_exists else '‚ùå'} {TRAIN_PATH}")
    log.info(f"  val.parquet: {'‚úÖ' if val_exists else '‚ùå'} {VAL_PATH}")
    log.info(f"  test.parquet: {'‚úÖ' if test_exists else '‚ùå'} {TEST_PATH}")

    # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ª–æ–≥–∏–∫—É –∏–∑ spark_process.py
    should_skip = not FORCE_PROCESS and train_exists and val_exists and test_exists

    log.info("–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞:")
    log.info(f"  FORCE_PROCESS = {FORCE_PROCESS}")
    log.info(f"  not FORCE_PROCESS = {not FORCE_PROCESS}")
    log.info(f"  –í—Å–µ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç = {train_exists and val_exists and test_exists}")
    log.info(
        f"  üéØ –î–û–õ–ñ–ù–û –ü–†–û–ü–£–°–¢–ò–¢–¨ –û–ë–†–ê–ë–û–¢–ö–£: {'–î–ê ‚úÖ' if should_skip else '–ù–ï–¢ ‚ùå'}"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if train_exists:
        try:
            train_files = list(Path(TRAIN_PATH).iterdir())
            log.info(f"  üìÅ train.parquet —Å–æ–¥–µ—Ä–∂–∏—Ç {len(train_files)} —Ñ–∞–π–ª–æ–≤")
        except Exception as e:
            log.error(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è train.parquet: {e}")

    if val_exists:
        try:
            val_files = list(Path(VAL_PATH).iterdir())
            log.info(f"  üìÅ val.parquet —Å–æ–¥–µ—Ä–∂–∏—Ç {len(val_files)} —Ñ–∞–π–ª–æ–≤")
        except Exception as e:
            log.error(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è val.parquet: {e}")

    if test_exists:
        try:
            test_files = list(Path(TEST_PATH).iterdir())
            log.info(f"  üìÅ test.parquet —Å–æ–¥–µ—Ä–∂–∏—Ç {len(test_files)} —Ñ–∞–π–ª–æ–≤")
        except Exception as e:
            log.error(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è test.parquet: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ –∏—Å—Ö–æ–¥–Ω—ã–π CSV
    csv_exists = Path(CSV_PATH).exists()
    log.info("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    log.info(f"  üìÑ CSV —Ñ–∞–π–ª: {'‚úÖ' if csv_exists else '‚ùå'} {CSV_PATH}")

    if csv_exists:
        try:
            csv_size = Path(CSV_PATH).stat().st_size / (1024 * 1024)
            log.info(f"      –†–∞–∑–º–µ—Ä: {csv_size:.2f} MB")
        except Exception as e:
            log.error(f"      –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞: {e}")

    log.info("=" * 50)
    log.info("üèÅ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")

    return should_skip


if __name__ == "__main__":
    result = test_file_logic()
    if result:
        logging.info("–†–ï–ó–£–õ–¨–¢–ê–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ –î–û–õ–ñ–ù–ê –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–∞")
    else:
        logging.info("–†–ï–ó–£–õ–¨–¢–ê–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ù–ï –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞")
