"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ö–æ—Å—Ç-–º–∞—à–∏–Ω–µ.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –µ—Å—Ç—å –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö –ø–µ—Ä–µ–¥ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.
"""
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')
log = logging.getLogger(__name__)

def check_local_directory(path, description):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    log.info(f"=== –ü—Ä–æ–≤–µ—Ä–∫–∞ {description} ===")
    log.info(f"–ü—É—Ç—å: {path}")

    if not Path(path).exists():
        log.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢: {path}")
        return

    log.info(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {path}")

    try:
        items = list(Path(path).iterdir())
        if not items:
            log.warning(f"‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ü–£–°–¢–ê–Ø: {path}")
            return

        log.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
        for item in sorted(items):
            if item.is_file():
                size_mb = item.stat().st_size / (1024 * 1024)
                log.info(f"  üìÑ {item.name} ({size_mb:.2f} MB)")
            elif item.is_dir():
                try:
                    sub_items = len(list(item.iterdir()))
                    log.info(f"  üìÅ {item.name}/ ({sub_items} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
                except PermissionError:
                    log.info(f"  üìÅ {item.name}/ (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞)")
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")

def main():
    log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –õ–û–ö–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –ù–ê –•–û–°–¢-–ú–ê–®–ò–ù–ï")
    log.info("=" * 60)

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–ø–∫–∞ –æ—Ç tests)
    project_root = Path(__file__).parent.parent
    log.info(f"–ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {project_root.absolute()}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    check_local_directory(project_root / "data", "–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö")
    check_local_directory(project_root / "data" / "raw", "–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    check_local_directory(project_root / "data" / "processed", "–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    check_local_directory(project_root / "scripts", "–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤")
    check_local_directory(project_root / "airflow" / "dags", "–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è DAG")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã
    log.info("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ===")

    files_to_check = [
        project_root / "data" / "raw" / "kindle_reviews.csv",
        project_root / "scripts" / "config.py",
        project_root / "scripts" / "download.py",
        project_root / "scripts" / "spark_process.py",
        project_root / "docker-compose.yml",
        project_root / "requirements.txt"
    ]

    for file_path in files_to_check:
        if file_path.exists():
            if file_path.is_file():
                size_mb = file_path.stat().st_size / (1024 * 1024)
                log.info(f"‚úÖ {file_path.name} ({size_mb:.2f} MB)")
            else:
                log.info(f"‚úÖ {file_path.name} (–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)")
        else:
            log.error(f"‚ùå –ù–ï –ù–ê–ô–î–ï–ù: {file_path}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Kaggle credentials
    import os
    kaggle_path = Path(os.path.expanduser("~")) / ".kaggle" / "kaggle.json"
    log.info("=== Kaggle credentials ===")
    if kaggle_path.exists():
        log.info(f"‚úÖ Kaggle credentials –Ω–∞–π–¥–µ–Ω—ã: {kaggle_path}")
    else:
        log.error(f"‚ùå Kaggle credentials –ù–ï –ù–ê–ô–î–ï–ù–´: {kaggle_path}")

    log.info("=" * 60)
    log.info("üèÅ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")

if __name__ == "__main__":
    main()
