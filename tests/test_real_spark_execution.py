"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ spark_process.py –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É.
"""

import subprocess
import sys
from datetime import datetime

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from scripts.logging_config import setup_test_logging

log = setup_test_logging()


def test_real_spark_processing():
    """–†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è spark_process.py"""
    log.info("üöÄ –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –í–´–ü–û–õ–ù–ï–ù–ò–Ø SPARK_PROCESS.PY")
    log.info("=" * 60)

    start_time = datetime.now()
    log.info(f"‚è∞ –ù–∞—á–∞–ª–æ: {start_time}")

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º spark_process.py –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥
        result = subprocess.run(
            [sys.executable, "/opt/airflow/scripts/spark_process.py"],
            capture_output=True,
            text=True,
            timeout=300,
        )  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç

        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()

        log.info(f"‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_time}")
        log.info(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        log.info(f"üì§ –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        log.info("=" * 30 + " STDOUT " + "=" * 30)
        if result.stdout:
            stdout_lines = result.stdout.strip().split("\\n")
            for i, line in enumerate(stdout_lines[:50]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 50 —Å—Ç—Ä–æ–∫
                log.info(f"  {i+1:2d}: {line}")
            if len(stdout_lines) > 50:
                log.info(f"  ... –∏ –µ—â–µ {len(stdout_lines) - 50} —Å—Ç—Ä–æ–∫")
        else:
            log.info("  (–ø—É—Å—Ç–æ–π)")

        log.info("=" * 30 + " STDERR " + "=" * 30)
        if result.stderr:
            stderr_lines = result.stderr.strip().split("\\n")
            for i, line in enumerate(
                stderr_lines[:20]
            ):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫ –æ—à–∏–±–æ–∫
                log.error(f"  {i+1:2d}: {line}")
            if len(stderr_lines) > 20:
                log.error(f"  ... –∏ –µ—â–µ {len(stderr_lines) - 20} —Å—Ç—Ä–æ–∫ –æ—à–∏–±–æ–∫")
        else:
            log.info("  (–Ω–µ—Ç –æ—à–∏–±–æ–∫)")

        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        log.info("=" * 60)
        if result.returncode == 0:
            log.info("‚úÖ –°–ö–†–ò–ü–¢ –ó–ê–í–ï–†–®–ò–õ–°–Ø –£–°–ü–ï–®–ù–û")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            output_text = (result.stdout + result.stderr).lower()
            if any(
                keyword in output_text
                for keyword in ["—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç", "already exist", "–ø—Ä–æ–ø—É—Å–∫", "skip"]
            ):
                log.info("‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ë–´–õ–ê –ü–†–û–ü–£–©–ï–ù–ê (–∫–∞–∫ –∏ –æ–∂–∏–¥–∞–ª–æ—Å—å)")
            elif duration < 10:
                log.info("‚úÖ –ë–´–°–¢–†–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï - –≤–µ—Ä–æ—è—Ç–Ω–æ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
            else:
                log.warning(
                    "‚ö†Ô∏è  –î–û–õ–ì–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï - –≤–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏—Å—å –∑–∞–Ω–æ–≤–æ"
                )

        else:
            log.error(f"‚ùå –°–ö–†–ò–ü–¢ –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–û–ô (–∫–æ–¥ {result.returncode})")

    except subprocess.TimeoutExpired:
        log.error("‚ùå –¢–ê–ô–ú–ê–£–¢: –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–ª—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ (>5 –º–∏–Ω—É—Ç)")
        log.error("   –≠—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ç–æ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∑–∞–Ω–æ–≤–æ")
    except Exception as e:
        log.error(f"‚ùå –û–®–ò–ë–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø: {e}")

    log.info("üèÅ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")


if __name__ == "__main__":
    test_real_spark_processing()
