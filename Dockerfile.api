# Dockerfile.api — корневой Dockerfile для сервиса API
FROM python:3.11-slim AS base
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_NO_CACHE_DIR=1

WORKDIR /app

FROM base AS deps
COPY requirements.api.txt /app/requirements.api.txt
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install -r /app/requirements.api.txt

# Скачиваем корпуса TextBlob для sentiment анализа
RUN python -m textblob.download_corpora

# Скачиваем корпуса NLTK для stemming
RUN python -c "import nltk; nltk.download('stopwords', quiet=True)"

FROM base AS runtime
RUN groupadd -g 10001 appgroup && useradd -m -u 10001 -g 10001 appuser

WORKDIR /app
# Скопируем установленные зависимости из слоя deps (под root)
COPY --from=deps /usr/local/lib/python3.11 /usr/local/lib/python3.11
COPY --from=deps /usr/local/bin /usr/local/bin
# Код приложения кладём от имени непривилегированного пользователя
COPY --chown=appuser:appgroup scripts/ ./scripts/
# На случай локального теста без volume смонтируем пустые каталоги артефактов
RUN mkdir -p /app/artefacts /app/artefacts/model_artefacts /app/artefacts/drift_artefacts /app/model \
    && chown -R appuser:appgroup /app/artefacts /app/model
USER appuser

# Кэш HuggingFace направляем в доступный для записи каталог
ENV TRANSFORMERS_CACHE=/tmp/transformers_cache
RUN mkdir -p /tmp/transformers_cache && chmod -R 700 /tmp/transformers_cache

EXPOSE 8000
HEALTHCHECK --interval=30s --timeout=5s --retries=5 CMD python -c "import urllib.request,sys; r=urllib.request.urlopen('http://127.0.0.1:8000/health', timeout=3); sys.exit(0 if getattr(r,'status',200)==200 else 1)" || exit 1

CMD ["gunicorn", "-k", "uvicorn.workers.UvicornWorker", "-w", "2", "-b", "0.0.0.0:8000", "scripts.api_service:app"]
